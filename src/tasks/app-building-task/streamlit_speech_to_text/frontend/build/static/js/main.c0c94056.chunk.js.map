{"version":3,"sources":["SpeechToText.tsx","index.tsx"],"names":["withStreamlitConnection","props","useSpeechRecognition","transcript","resetTranscript","useState","isListening","setIsListening","useEffect","Streamlit","setFrameHeight","console","log","setComponentValue","className","onClick","SpeechRecognition","stopListening","stopped","startListening","continuous","engine","Styletron","ReactDOM","render","StrictMode","value","theme","DarkTheme","document","getElementById"],"mappings":"kRA0EeA,eA7CM,SAACC,GAA2B,IAAD,EACNC,iCAAhCC,EADsC,EACtCA,WAAYC,EAD0B,EAC1BA,gBAD0B,EAERC,oBAAS,GAFD,mBAEvCC,EAFuC,KAE1BC,EAF0B,KAsB9C,OALAC,qBAAU,WACRC,IAAUC,iBACVC,QAAQC,IAAI,CAAET,eACK,KAAfA,GAAmBM,IAAUI,kBAAkBV,KAClD,CAACA,IAEF,yBAAKW,UAAU,sBACb,yBAAKA,UAAU,wBACXR,EAQA,4BACEQ,UAAU,gDACVC,QAzBS,WACjBR,GAAe,GACfS,IAAkBC,gBAClBR,IAAUI,kBAAkB,CAAEV,aAAYe,SAAS,IACnDd,MAmBM,kBAPA,yBACEU,UAAU,2DACVC,QAxBY,WACpBR,GAAe,GACfS,IAAkBG,eAAe,CAC/BC,YAAY,MAmBR,wBC9CJC,EAAS,IAAIC,IAGnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAmBC,MAAOL,GACxB,kBAAC,IAAD,CAAeM,MAAOC,KACpB,kBAAC,EAAD,SAINC,SAASC,eAAe,W","file":"static/js/main.c0c94056.chunk.js","sourcesContent":["//@ts-nocheck\nimport React, { useEffect } from \"react\"\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\"\nimport {\n  ComponentProps,\n  Streamlit,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\n\nimport { useState } from \"react\"\n\n/**\n * We can use a Typescript interface to destructure the arguments from Python\n * and validate the types of the input\n */\n// interface PythonArgs {\n//   label: string\n//   minValue?: number\n//   maxValue?: number\n//   initialValue: number[]\n// }\n\n/**\n * No more props manipulation in the code.\n * We store props in state and pass value directly to underlying Slider\n * and then back to Streamlit.\n */\nconst SpeechToText = (props: ComponentProps) => {\n  const { transcript, resetTranscript } = useSpeechRecognition()\n  const [isListening, setIsListening] = useState(false)\n\n  const handleListing = () => {\n    setIsListening(true)\n    SpeechRecognition.startListening({\n      continuous: true,\n    })\n  }\n  const stopHandle = () => {\n    setIsListening(false)\n    SpeechRecognition.stopListening()\n    Streamlit.setComponentValue({ transcript, stopped: true })\n    resetTranscript()\n  }\n\n  useEffect(() => {\n    Streamlit.setFrameHeight()\n    console.log({ transcript })\n    if (transcript !== \"\") Streamlit.setComponentValue(transcript)\n  }, [transcript])\n  return (\n    <div className=\"microphone-wrapper\">\n      <div className=\"mircophone-container\">\n        {!isListening ? (\n          <div\n            className=\"microphone-icon-container btn btn-sm btn-outline-success\"\n            onClick={handleListing}\n          >\n            Start Recording\n          </div>\n        ) : (\n          <button\n            className=\"microphone-stop btn btn-sm btn-outline-danger\"\n            onClick={stopHandle}\n          >\n            Stop Recording\n          </button>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default withStreamlitConnection(SpeechToText)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\n// Lots of import to define a Styletron engine and load the light theme of baseui\nimport { DarkTheme, ThemeProvider } from \"baseui\"\nimport { Client as Styletron } from \"styletron-engine-atomic\"\nimport { Provider as StyletronProvider } from \"styletron-react\"\nimport SpeechToText from \"./SpeechToText\"\n\nconst engine = new Styletron()\n\n// Wrap your CustomSlider with the baseui them\nReactDOM.render(\n  <React.StrictMode>\n    <StyletronProvider value={engine}>\n      <ThemeProvider theme={DarkTheme}>\n        <SpeechToText />\n      </ThemeProvider>\n    </StyletronProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}